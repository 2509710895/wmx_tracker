{"code":"import { TrackerConfig } from \"../types/index\";\nimport { createHisttoryEvent } from \"../utils/pv\";\nconst MouseEventList = [\n    \"click\",\n    \"dblclick\",\n    \"contextmenu\",\n    \"mousedown\",\n    \"mouseup\",\n    \"mouseenter\",\n    \"mouseout\",\n    \"mouseover\",\n];\nexport default class Tracker {\n    constructor(options) {\n        this.data = Object.assign(this.initDefaultOptions(), options);\n        this.installTracker();\n    }\n    initDefaultOptions() {\n        window.history[\"pushState\"] = createHisttoryEvent(\"pushState\");\n        window.history[\"replaceState\"] = createHisttoryEvent(\"replaceState\");\n        createHisttoryEvent(\"pushState\");\n        return {\n            sdkVersion: TrackerConfig.SDK_VERSION,\n            historyTracker: false,\n            hashTracker: false,\n            domTracker: false,\n            jsError: false,\n        };\n    }\n    setUuid(uuid) {\n        this.data.uuid = uuid;\n    }\n    setExtra(extra) {\n        this.data.extra = extra;\n    }\n    sendTracker(data) {\n        this.reportTracker(data);\n    }\n    captureDomEvent() {\n        MouseEventList.forEach((event) => {\n            document.addEventListener(event, (e) => {\n                const target = e.target;\n                if (!target || typeof target.getAttribute !== \"function\") {\n                    return;\n                }\n                const targetKey = target.getAttribute(\"target-key\");\n                if (targetKey) {\n                    this.reportTracker({ event, targetKey });\n                }\n            });\n        });\n    }\n    captureEvents(eventListener, targetKey, data) {\n        eventListener.forEach((event) => {\n            window.addEventListener(event, () => {\n                console.log(\"监听到了\", event, targetKey);\n                this.reportTracker({ event, targetKey, data });\n            });\n        });\n    }\n    installTracker() {\n        if (this.data.historyTracker) {\n            this.captureEvents([\"popstate\", \"pushState\", \"replaceState\"], \"history-pv\");\n        }\n        if (this.data.hashTracker) {\n            this.captureEvents([\"hashchange\"], \"hash-pv\");\n        }\n        if (this.data.domTracker) {\n            this.captureDomEvent();\n        }\n        if (this.data.jsError) {\n            this.jsErrorTracker();\n        }\n    }\n    jsErrorTracker() {\n        this.errorTracker();\n        this.promiseErrorTracker();\n    }\n    errorTracker() {\n        window.addEventListener(\"error\", (event) => {\n            const { message } = event;\n            console.log(\"js-error\", event);\n            this.reportTracker({\n                event: \"js-error\",\n                targetKey: \"js-error\",\n                message,\n            });\n        }, true);\n    }\n    promiseErrorTracker() {\n        window.addEventListener(\"unhandledrejection\", (event) => {\n            console.log(\"promise-error\", event);\n            event.promise.catch((err) => {\n                this.reportTracker({\n                    event: \"promise-error\",\n                    targetKey: \"promise-error\",\n                    message: err,\n                });\n            });\n        });\n    }\n    reportTracker(data) {\n        const params = Object.assign(this.data, data, { time: Date.now() });\n        let header = {\n            type: \"application/x-www-form-urlencoded\",\n        };\n        let blob = new Blob([JSON.stringify(params)], header);\n        navigator.sendBeacon(this.data.requestUrl, blob);\n    }\n}\n","references":["/Users/maimai/study/mine/wmx_tracker/src/types/index.ts","/Users/maimai/study/mine/wmx_tracker/src/utils/pv.ts"]}
